apply plugin: 'antlr'

repositories {
    mavenCentral()
}

dependencies {
    antlr 'org.antlr:antlr4:4.5.2' 	// using ANTLR v4
}

generateGrammarSource {
    /*arguments += ["-visitor", "-long-messages"]*/
    /*arguments += ["-visitor", "-no-listener"]*/
    arguments += ["-visitor", "-listener"]
}

task compile(type: JavaCompile){
  classpath = project.getConfigurations().getByName(AntlrPlugin.ANTLR_CONFIGURATION_NAME) + sourceSets.main.runtimeClasspath
  source = fileTree(dir: 'src/main/', include: '*.java')
  destinationDir = file('build/classes/main')
}

task grunGui (type:JavaExec){
	classpath = project.getConfigurations().getByName(AntlrPlugin.ANTLR_CONFIGURATION_NAME) + sourceSets.main.runtimeClasspath
	main = 'org.antlr.v4.gui.TestRig'

	def grammarName = "Wolf"
	args = [grammarName, 'init', '-gui', "src/main/Wolf/first.wlf"]
}

task grunTokens (type:JavaExec){
	classpath = project.getConfigurations().getByName(AntlrPlugin.ANTLR_CONFIGURATION_NAME) + sourceSets.main.runtimeClasspath
	main = 'org.antlr.v4.gui.TestRig'

	def grammarName = "Wolf"
	args = [grammarName, 'init', '-tokens', "src/main/Wolf/first.wlf"]
}

task grunTree (type:JavaExec){
	classpath = project.getConfigurations().getByName(AntlrPlugin.ANTLR_CONFIGURATION_NAME) + sourceSets.main.runtimeClasspath
	main = 'org.antlr.v4.gui.TestRig'

	def grammarName = "Wolf"
	args = [grammarName, 'init', '-tree', "src/main/Wolf/first.wlf"]
}

def ask() {
  def console = System.console()
  if (console)
    return console.readLine('\n> Please enter input string or filename to parse OR press enter⏎ to skip:\n')
  else
    logger.error "Cannot get console. Using default inputFile src/main/Wolf/first.wlf"
  return ''
}

task grun(type:JavaExec) {
    classpath = project.getConfigurations().getByName(AntlrPlugin.ANTLR_CONFIGURATION_NAME) + sourceSets.main.runtimeClasspath
    main = 'Wolf'
    def input = ask()
    args = input.length() > 0 ? [input] : ["src/main/Wolf/first.wlf"]
}
