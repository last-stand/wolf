apply plugin: 'antlr'

repositories {
    mavenCentral()
}

dependencies {
    antlr 'org.antlr:antlr4:4.5.2' 	// using ANTLR v4
}

generateGrammarSource {
    /*arguments += ["-visitor", "-long-messages"]*/
    arguments += ["-visitor", "-no-listener"]
}

task compile(type: JavaCompile) {
  classpath = project.getConfigurations().getByName(AntlrPlugin.ANTLR_CONFIGURATION_NAME) + sourceSets.main.runtimeClasspath
  source = fileTree(dir: 'src/main/', include: '*.java')
  destinationDir = file('build/classes/main')
}

task grun(type:JavaExec){
  classpath = project.getConfigurations().getByName(AntlrPlugin.ANTLR_CONFIGURATION_NAME) + sourceSets.main.runtimeClasspath
  main = 'Wolf'
  args = ["src/main/Wolf/first.wlf"]
}

task grunGui (type:JavaExec){
	classpath = project.getConfigurations().getByName(AntlrPlugin.ANTLR_CONFIGURATION_NAME) + sourceSets.main.runtimeClasspath
	main = 'org.antlr.v4.gui.TestRig'

	def grammarName = "Wolf"
	args = [grammarName, 'init', '-gui', "src/main/Wolf/first.wlf"]
}

task grunToken (type:JavaExec){
	classpath = project.getConfigurations().getByName(AntlrPlugin.ANTLR_CONFIGURATION_NAME) + sourceSets.main.runtimeClasspath
	main = 'org.antlr.v4.gui.TestRig'

	def grammarName = "Wolf"
	args = [grammarName, 'init', '-tokens', "src/main/Wolf/first.wlf"]
}

task grunTree (type:JavaExec){
	classpath = project.getConfigurations().getByName(AntlrPlugin.ANTLR_CONFIGURATION_NAME) + sourceSets.main.runtimeClasspath
	main = 'org.antlr.v4.gui.TestRig'

	def grammarName = "Wolf"
	args = [grammarName, 'init', '-tree', "src/main/Wolf/first.wlf"]
}

/* antlr4 Easy.g4 -no-listener -visitor
javac -cp /usr/local/Cellar/antlr/4.5.2/antlr-4.5.2-complete.jar: *.java
java -cp /usr/local/Cellar/antlr/4.5.2/antlr-4.5.2-complete.jar: Easy prog.easy */
